name: CI/CD for deploying MERN Application

on:
  push:
    branches: [release-1.0]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Build frontend Docker image
        run: docker build -t mparmilan/booklogix-frontend:latest --build-arg VITE_API_BASE_URL="${{ secrets.VITE_API_BASE_URL }}" ./frontend

      - name: Build backend Docker image
        run: docker build -t mparmilan/booklogix-backend:latest --build-arg NODE_ENV=production --build-arg PORT="${{ secrets.PORT }}" --build-arg MONGO_URI="${{ secrets.MONGO_URI }}" ./backend

      - name: Push frontend Docker image
        run: docker push mparmilan/booklogix-frontend:latest

      - name: Push backend Docker image
        run: docker push mparmilan/booklogix-backend:latest

      - name: ✅ Images Published
        run: echo "🎉 Frontend & Backend images pushed to Docker Hub successfully!"

  # 2️⃣ Deploy Stage
  deploy:
    runs-on: [self-hosted, AzureVM]
    needs: build
    steps:
      - name: Pull the frontend image from Docker Hub
        run: docker pull mparmilan/booklogix-frontend:latest

      - name: Pull the backend image from Docker Hub
        run: docker pull mparmilan/booklogix-backend:latest

      - name: Create Docker network (if not exists)
        run: docker network create booklogix-network || true

      - name: Remove existing frontend container
        run: docker rm -f booklogix-frontend-container || true

      - name: Remove existing backend container
        run: docker rm -f booklogix-backend-container || true

      - name: Run backend Docker container
        run: |
          docker run -d \
            --name booklogix-backend-container \
            --network booklogix-network \
            -e MONGO_URI=${{ secrets.MONGO_URI }} \
            -p 5000:5000 \
            mparmilan/booklogix-backend:latest

      - name: Run frontend Docker container
        run: |
          docker run -d \
            --name booklogix-frontend-container \
            --network booklogix-network \
            -p 3020:80 \
            mparmilan/booklogix-frontend:latest

      # ✅ Success Email
      - name: 📧 Send Success Email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "✅ Deployment Successful - Booklogix"
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: "Booklogix CI/CD Deployment <${{ secrets.SMTP_USERNAME }}>"
          body: |
            🎉 Deployment completed successfully! 🎉
            
            🌍 Access URLs:
              - Frontend → http://${{ secrets.SERVER_IP }}:3020
            
            🔔 Triggered by: ${{ github.actor }}
            📝 Commit: ${{ github.event.head_commit.message }}
            🕒 Time: ${{ github.event.head_commit.timestamp }}

      # ❌ Failure Email
      - name: 📧 Send Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "❌ Deployment Failed - Booklogix"
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: "Booklogix CI/CD Bot <${{ secrets.SMTP_USERNAME }}>"
          body: |
            ❌ Deployment FAILED! ❌
            
            🔔 Triggered by: ${{ github.actor }}
            📝 Commit: ${{ github.event.head_commit.message }}
            🕒 Time: ${{ github.event.head_commit.timestamp }}
            
            📄 Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
